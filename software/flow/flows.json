[
    {
        "id": "ec5af00ecd098976",
        "type": "tab",
        "label": "prusa + shelly + gcode analyser",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "57baeac36603a20d",
        "type": "tab",
        "label": "Machine name + sensor name",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "emonPI energy sensor",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e83f6f0b92151d65",
        "type": "tab",
        "label": "Shelly sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c970b824705576f5",
        "type": "tab",
        "label": "air gradient sensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3272a31eb99f97fd",
        "type": "subflow",
        "name": "parse shelly data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "b71a7b0247b9a82f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "b71a7b0247b9a82f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d217b2feb7bbec18",
        "type": "subflow",
        "name": "calculate energy from power",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "b2796d317002a176"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 80,
                "wires": [
                    {
                        "id": "b3dd881c1c8f59a3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "af252d67b3d423b1",
        "type": "subflow",
        "name": "Not PRINTING reset",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "20722fdac233c3b4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "20722fdac233c3b4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b919a24d273b092a",
        "type": "subflow",
        "name": "process printer data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "4397b54032687aba"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "4397b54032687aba",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fc341e58f36836a4",
        "type": "subflow",
        "name": "process MK3S data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "06ff291394c7c287"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 40,
                "wires": [
                    {
                        "id": "06ff291394c7c287",
                        "port": 0
                    }
                ]
            },
            {
                "x": 540,
                "y": 140,
                "wires": [
                    {
                        "id": "acd98823866bc9b7",
                        "port": 1
                    }
                ]
            },
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "acd98823866bc9b7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c42ae1f553f7a324",
        "type": "subflow",
        "name": "parse tasmota data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c876e538a0499711"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "c876e538a0499711",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "771a9640986df080",
        "type": "subflow",
        "name": "parse file_name",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "3b21d965959dafab"
                    },
                    {
                        "id": "114b0ce777307343"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 540,
                "y": 80,
                "wires": [
                    {
                        "id": "16a01fbbb8a7c7c0",
                        "port": 0
                    },
                    {
                        "id": "c65a58d2f0768004",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "662a52ee1464ec2c",
        "type": "subflow",
        "name": "process energy",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 500,
                "wires": [
                    {
                        "id": "fb2a5b46a0533104"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 940,
                "y": 500,
                "wires": [
                    {
                        "id": "8535ffa692521c32",
                        "port": 0
                    },
                    {
                        "id": "5d0cb12b6f5ceefc",
                        "port": 0
                    },
                    {
                        "id": "bf97737c25218234",
                        "port": 0
                    },
                    {
                        "id": "f18adb8c5a5c7edf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1133890aa08bbfb7",
        "type": "subflow",
        "name": "energy monitor",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "3cb4a658c2fdfc87"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "5fcf80fa8461bed3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "15c02bcbea060190",
        "type": "subflow",
        "name": "process PrusaMINI data",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "95265fbfb5cc4039"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "95265fbfb5cc4039",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "26dc589d0b7e3f06",
        "type": "subflow",
        "name": "process printer data (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "18b86d7a0a7b8f9b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "18b86d7a0a7b8f9b",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b56f3ebbdd287ae6",
        "type": "subflow",
        "name": "process printer data (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "2c49483376d9bcf8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "2c49483376d9bcf8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4eb801c5feee1f98",
        "type": "subflow",
        "name": "process printer data (4)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8b5faa98556cb813"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "8b5faa98556cb813",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d5c353d21ed681c9",
        "type": "subflow",
        "name": "energy monitor (2)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "7d081b124596da9b"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "10653d742cbba641",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f36865a9b0367ee5",
        "type": "subflow",
        "name": "process printer data (5)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "8cabd656481a12ce"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "8cabd656481a12ce",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "271e8c6d30455066",
        "type": "subflow",
        "name": "energy monitor (3)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "9089812951b8c914"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "2f62398aad3a4a1d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "f0d623925ac07e2d",
        "type": "subflow",
        "name": "process printer data (6)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "d7e347fd1dbf912a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "d7e347fd1dbf912a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "192b2bd79f1cc9d1",
        "type": "subflow",
        "name": "energy monitor (4)",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "32fe707fbf8dad54"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 80,
                "wires": [
                    {
                        "id": "dcd322b39e0146a9",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "051820b4a1362d38",
        "type": "group",
        "z": "ec5af00ecd098976",
        "name": "G-code Analysis ",
        "style": {
            "label": true
        },
        "nodes": [
            "b052a32c02e9a8fb",
            "59f62f883b59548d",
            "441841bf3cdd26dc",
            "05422c266324773e",
            "4eb05edd0fdb960c",
            "9965c29b0372fc31",
            "7b79a6122bd2dc63",
            "aa0ae0bf318b0c1a"
        ],
        "x": 1624,
        "y": 159,
        "w": 692,
        "h": 282
    },
    {
        "id": "762130b55ea7bbd0",
        "type": "group",
        "z": "ec5af00ecd098976",
        "name": "Prusa Printer Flow",
        "style": {
            "label": true
        },
        "nodes": [
            "feba35c4968704db",
            "04145d02f0b5ac4e",
            "50ba87844ed3828c",
            "d0d7f9e23af26e35",
            "abe3e01577d75251",
            "fdeee465b8a00662",
            "93a11acebfb74e36",
            "6bc64a96b5d40bd4",
            "b9934f41d1ee4cd1",
            "023f4a354bcdf8a4"
        ],
        "x": 74,
        "y": 253,
        "w": 1572,
        "h": 328
    },
    {
        "id": "77fecb5b6322ef90",
        "type": "group",
        "z": "ec5af00ecd098976",
        "name": "Energy Sensor Flow",
        "style": {
            "label": true
        },
        "nodes": [
            "453cf66caa46d7c6",
            "92f4e84bb2feef06",
            "7c0854b287c9cb3e",
            "8eedbff3177a562b",
            "ecf7e956b13dfa94"
        ],
        "x": 234,
        "y": 659,
        "w": 852,
        "h": 222
    },
    {
        "id": "79b9a1f35b796f7d",
        "type": "group",
        "z": "ec5af00ecd098976",
        "name": "Device Configurations",
        "style": {
            "label": true
        },
        "nodes": [
            "cab08d2c11a686e3",
            "2fa165c7f25a1678"
        ],
        "x": 234,
        "y": 139,
        "w": 532,
        "h": 82
    },
    {
        "id": "8c9692d8f706424d",
        "type": "group",
        "z": "57baeac36603a20d",
        "name": "Machine configurations",
        "style": {
            "label": true
        },
        "nodes": [
            "7ea7eb783a22aa55",
            "f24bbfc5da90ada7"
        ],
        "x": 134,
        "y": 39,
        "w": 532,
        "h": 82
    },
    {
        "id": "abbf381a615d5555",
        "type": "group",
        "z": "57baeac36603a20d",
        "name": "Prusa Printer Flow",
        "style": {
            "label": true
        },
        "nodes": [
            "cd929542f7fa8a3b",
            "4128cd9f9bf4f993",
            "56175a0e7bbaa8a2",
            "f0375236fa9ee83f",
            "10a27260fe52c4d9",
            "6aca11aeeddc9452",
            "94d2851a44cfdf95",
            "c59de4ed040fd1e9",
            "5f6f617de8db8f9e",
            "fe0a04a6cf21a576"
        ],
        "x": 114,
        "y": 133,
        "w": 1632,
        "h": 328
    },
    {
        "id": "72d96e169767b10e",
        "type": "group",
        "z": "57baeac36603a20d",
        "name": "Energy sensor Flow",
        "style": {
            "label": true
        },
        "nodes": [
            "c65b1b38fb15c364",
            "f7b1e4e0eb5675fc",
            "713f1b254f9114c6",
            "96b7144416781ced",
            "3ba05b737ca84ab8"
        ],
        "x": 174,
        "y": 499,
        "w": 852,
        "h": 222
    },
    {
        "id": "b9934f41d1ee4cd1",
        "type": "group",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "Calcuate the energy consumption per print",
        "style": {
            "label": true
        },
        "nodes": [
            "a9e6755f781a7afd",
            "1fdb1deeea8b608b",
            "54e56ec6455c354d",
            "99d3806b868850d7",
            "48546b77fb61a41a"
        ],
        "x": 824,
        "y": 279,
        "w": 772,
        "h": 162
    },
    {
        "id": "fe0a04a6cf21a576",
        "type": "group",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "Calcuate the energy consumption per print",
        "style": {
            "label": true
        },
        "nodes": [
            "c740a5c2bc039326",
            "1b0be97060b6fb1e",
            "22146774fc315105",
            "3f42bb761c80a0bf",
            "47d0f4f679d1cc04"
        ],
        "x": 864,
        "y": 159,
        "w": 812,
        "h": 162
    },
    {
        "id": "54e864ca60d9273b",
        "type": "websocket-listener",
        "path": "ws://192.168.188.153:8887",
        "wholemsg": "false"
    },
    {
        "id": "0525d302e5e4421b",
        "type": "websocket-listener",
        "path": "ws://192.168.188.111:8887",
        "wholemsg": "false"
    },
    {
        "id": "c4bb67b005f9e6aa",
        "type": "global-config",
        "env": [],
        "modules": {
            "node-red-contrib-watt2kwh": "0.1.2",
            "node-red-contrib-influxdb": "0.6.1"
        }
    },
    {
        "id": "b71a7b0247b9a82f",
        "type": "function",
        "z": "3272a31eb99f97fd",
        "name": "parse shelly data",
        "func": "var payload_output = {payload: {}}\n\npayload_output.payload.shelly_state = Boolean(msg.payload.output);\nglobal.set('shelly_power', Number(msg.payload.apower));\npayload_output.payload.power = Number(msg.payload.apower);\npayload_output.payload.current = Number(msg.payload.current);\npayload_output.topic = msg.topic;\n\nvar voltage = Number(msg.payload.voltage);\nif (voltage != 0) payload_output.payload.voltage = voltage;\n\nreturn payload_output;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1e5753edf7e4be6e",
        "type": "watt2kwh",
        "z": "d217b2feb7bbec18",
        "format": "wh",
        "maximum": "60",
        "maximumunit": "mins",
        "name": "",
        "x": 440,
        "y": 80,
        "wires": [
            [
                "b3dd881c1c8f59a3"
            ]
        ]
    },
    {
        "id": "b2796d317002a176",
        "type": "change",
        "z": "d217b2feb7bbec18",
        "name": "get apower",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.apower",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 230,
        "y": 80,
        "wires": [
            [
                "1e5753edf7e4be6e"
            ]
        ]
    },
    {
        "id": "b3dd881c1c8f59a3",
        "type": "change",
        "z": "d217b2feb7bbec18",
        "name": "set payload.energy",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "payload.energy",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "20722fdac233c3b4",
        "type": "function",
        "z": "af252d67b3d423b1",
        "name": "function 1",
        "func": "if (msg.payload.state != \"PRINTING\"){\n    msg.reset = 1;\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4397b54032687aba",
        "type": "function",
        "z": "b919a24d273b092a",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\n//msg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "06ff291394c7c287",
        "type": "function",
        "z": "fc341e58f36836a4",
        "name": "parse MK3S data",
        "func": "var printer_state = String(msg.payload.printer.state);\nvar plugenergy = global.get('mk3s-1-energy');\n\nif (printer_state != \"PRINTING\")\n    return {\n        payload: {\n            state: printer_state,\n            printertype: String(msg.printertype),\n            plug_energy: Number(plugenergy),\n            simple_state: \"IDLE\"\n        }\n    };\n\nvar printer = msg.payload.printer;\nvar job = msg.payload.job;\nvar file = msg.payload.fileinfo;\n\nreturn {\n    payload: {\n        free_space: Number(msg.payload.storage[0].free_space),\n        state: printer_state,\n        simple_state: \"PRINTING\",\n        temp_nozzle: Number(printer.temp_nozzle),\n        target_nozzle: Number(printer.target_nozzle),\n        temp_bed: Number(printer.temp_bed),\n        target_bed: Number(printer.target_bed),\n        flow: Number(printer.flow),\n        speed: Number(printer.speed),\n        job_id: Number(job.id),\n        job_progress: Number(job.progress),\n        job_time_remaining: Number(job.time_remaining),\n        job_time_printing: Number(job.time_printing),\n        // file_name: String(file.display_name)\n        }\n    };",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 120,
        "wires": [
            [
                "acd98823866bc9b7"
            ]
        ]
    },
    {
        "id": "acd98823866bc9b7",
        "type": "switch",
        "z": "fc341e58f36836a4",
        "name": "",
        "property": "payload.simple_state",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRINTING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "IDLE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 120,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "c876e538a0499711",
        "type": "function",
        "z": "c42ae1f553f7a324",
        "name": "parse tasmota-shelly data",
        "func": "var payload_output = { payload: {} }\n\npayload_output.payload.power = Number(msg.payload.ENERGY.Power);\npayload_output.payload.current = Number(msg.payload.ENERGY.Current);\n\nvar voltage = Number(msg.payload.ENERGY.Voltage);\nif (voltage != 0) payload_output.payload.voltage = voltage;\n\nreturn payload_output;\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "16a01fbbb8a7c7c0",
        "type": "function",
        "z": "771a9640986df080",
        "name": "function 3",
        "func": "\nglobal.set('filename', msg.payload.job.filename); \nglobal.set('job-id',msg.payload.id);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "3b21d965959dafab",
        "type": "switch",
        "z": "771a9640986df080",
        "name": "mk3s filename",
        "property": "payload.job.filename",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 220,
        "y": 40,
        "wires": [
            [
                "16a01fbbb8a7c7c0"
            ]
        ]
    },
    {
        "id": "114b0ce777307343",
        "type": "switch",
        "z": "771a9640986df080",
        "name": "mini filename",
        "property": "payload.file.display_name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 120,
        "wires": [
            [
                "c65a58d2f0768004"
            ]
        ]
    },
    {
        "id": "c65a58d2f0768004",
        "type": "function",
        "z": "771a9640986df080",
        "name": "function 8",
        "func": "global.set('filename', msg.payload.file.display_name);\nglobal.set('job-id',msg.payload.id);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "fb2a5b46a0533104",
        "type": "switch",
        "z": "662a52ee1464ec2c",
        "name": "printer type",
        "property": "printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSAMK3S1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSAMK3S2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSAMK3S3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 310,
        "y": 500,
        "wires": [
            [
                "8535ffa692521c32"
            ],
            [
                "5d0cb12b6f5ceefc"
            ],
            [
                "bf97737c25218234"
            ],
            [
                "f18adb8c5a5c7edf"
            ]
        ]
    },
    {
        "id": "8535ffa692521c32",
        "type": "function",
        "z": "662a52ee1464ec2c",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy_prusamini') == undefined) {\n    context.set('startenergy_prusamini', 0);\n}\n\nif (context.get('stopenergy_prusamini') == undefined) {\n    context.set('stopenergy_prusamini', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy_prusamini');\nlet stopenergy = context.get('stopenergy_prusamini');\n\nnode.warn(startenergy);\nnode.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 1 && startenergy == 0) {\n    startenergy = global.get('mini-energy'); // Update only if startenergy is 0\n} else if (msg.payload.progress == 99 && stopenergy == 0) {\n    stopenergy = global.get('mini-energy'); // Update only if stopenergy is 0\n}\n\n// Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            printer_name: String(msg.printertype),\n            job_name: String(msg.payload.filename_name),\n            job_energy: Number(calculatedEnergy)\n        }\n        \n    };\n}\n\n// Update the context with the new values\ncontext.set('startenergy_prusamini', startenergy);\ncontext.set('stopenergy_prusamini', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "5d0cb12b6f5ceefc",
        "type": "function",
        "z": "662a52ee1464ec2c",
        "name": "energy-mk3s-1",
        "func": "var filename = global.get('filename');\n// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy_mk3s-1') == undefined) {\n    context.set('startenergy_mk3s-1', 0);\n}\n\nif (context.get('stopenergy_mk3s-1') == undefined) {\n    context.set('stopenergy_mk3s-1', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy_mk3s-1');\nlet stopenergy = context.get('stopenergy_mk3s-1');\n\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 1 && startenergy == 0) {\n    startenergy = global.get('mk3s-1-energy'); // Update only if startenergy is 0\n} else if (msg.payload.progress == 99 && stopenergy == 0) {\n    stopenergy = global.get('mk3s-1-energy'); // Update only if stopenergy is 0\n}\n\n// Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0) {\n    var calculatedEnergy = stopenergy - startenergy;\n\n    // Reset the context values for next cycle\n    context.set('startenergy_mk3s-1', 0);\n    context.set('stopenergy_mk3s-1', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            printer_name: String(msg.printertype),\n            job_name: String(filename),\n            job_energy: Number(calculatedEnergy)\n        }\n\n    };\n}\n\n// Update the context with the new values\ncontext.set('startenergy_mk3s-1', startenergy);\ncontext.set('stopenergy_mk3s-1', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "bf97737c25218234",
        "type": "function",
        "z": "662a52ee1464ec2c",
        "name": "energy-mk3s-2",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy_mk3s-2') == undefined) {\n    context.set('startenergy_mk3s-2', 0);\n}\n\nif (context.get('stopenergy_mk3s-2') == undefined) {\n    context.set('stopenergy_mk3s-2', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy_mk3s-2');\nlet stopenergy = context.get('stopenergy_mk3s-2');\n\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 1 && startenergy == 0) {\n    startenergy = global.get('mk3s-2-energy'); // Update only if startenergy is 0\n} else if (msg.payload.progress == 99 && stopenergy == 0) {\n    stopenergy = global.get('mk3s-2-energy'); // Update only if stopenergy is 0\n}\n\n// Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0) {\n    var calculatedEnergy = stopenergy - startenergy;\n\n    // Reset the context values for next cycle\n    context.set('startenergy_mk3s-2', 0);\n    context.set('stopenergy_mk3s-2', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            printer_name: String(msg.printertype),\n            job_name: String(filename),\n            job_energy: Number(calculatedEnergy)\n        }\n\n    };\n}\n\n// Update the context with the new values\ncontext.set('startenergy_mk3s-2', startenergy);\ncontext.set('stopenergy_mk3s-2', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f18adb8c5a5c7edf",
        "type": "function",
        "z": "662a52ee1464ec2c",
        "name": "energy-mk3s-3",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy_mk3s-3') == undefined) {\n    context.set('startenergy_mk3s-3', 0);\n}\n\nif (context.get('stopenergy_mk3s-3') == undefined) {\n    context.set('stopenergy_mk3s-3', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy_mk3s-3');\nlet stopenergy = context.get('stopenergy_mk3s-3');\n\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 1 && startenergy == 0) {\n    startenergy = global.get('mk3s-3-energy'); // Update only if startenergy is 0\n} else if (msg.payload.progress == 99 && stopenergy == 0) {\n    stopenergy = global.get('mk3s-3-energy'); // Update only if stopenergy is 0\n}\n\n// Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0) {\n    var calculatedEnergy = stopenergy - startenergy;\n\n    // Reset the context values for next cycle\n    context.set('startenergy_mk3s-3', 0);\n    context.set('stopenergy_mk3s-3', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            printer_name: String(msg.printertype),\n            job_name: String(filename),\n            job_energy: Number(calculatedEnergy)\n        }\n\n    };\n}\n\n// Update the context with the new values\ncontext.set('startenergy_mk3s-3', startenergy);\ncontext.set('stopenergy_mk3s-3', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "3cb4a658c2fdfc87",
        "type": "switch",
        "z": "1133890aa08bbfb7",
        "name": "",
        "property": "payload.printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSA-MK3S-1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "69d94f6aeefab018"
            ],
            [
                "1a8d663d816eba7c"
            ]
        ]
    },
    {
        "id": "69d94f6aeefab018",
        "type": "change",
        "z": "1133890aa08bbfb7",
        "name": "mini energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mini-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "5fcf80fa8461bed3"
            ]
        ]
    },
    {
        "id": "1a8d663d816eba7c",
        "type": "change",
        "z": "1133890aa08bbfb7",
        "name": "mk3s1 energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mk3s1-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "5fcf80fa8461bed3"
            ]
        ]
    },
    {
        "id": "5fcf80fa8461bed3",
        "type": "function",
        "z": "1133890aa08bbfb7",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy') == undefined) {\n    context.set('startenergy', 0);\n}\n\nif (context.get('stopenergy') == undefined) {\n    context.set('stopenergy', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy');\nlet stopenergy = context.get('stopenergy');\n\n// Check if energy calculation has already occurred\nlet energyCalculated = context.get('energyCalculated');\nnode.warn(startenergy);\nnode.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 0 && startenergy == 0) {\n    startenergy = global.get(msg.payload.energytype); // Update only if startenergy is 0\n    // var job_name = msg.payload.file_name;\n    // var job_id = msg.payload.job_id;\n} else if (msg.payload.progress == 100 && stopenergy == 0 && !energyCalculated) {\n    stopenergy = global.get(msg.payload.energytype); // Update only if stopenergy is 0\n    var print_time = msg.payload.time_printing;\n    var filename = global.get('filename');\n    var job_id = global.get('job-id');\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy', 0);\n    context.set('stopenergy', 0);\n\n    // Set a flag to mark that energy calculation has occurred\n    context.set('energyCalculated', true);\n\n    // Output the complete msg object including payload and additional properties\n    if (stopenergy != 0 && startenergy != 0) {\n        msg.payload = {\n            job_id: Number(job_id),\n            job_name: String(filename),\n            job_energy: Number(calculatedEnergy),\n            job_time: Number(msg.payload.time_printing)\n        };\n        return msg;\n    }\n}\n\n/*/ Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0 && msg.payload.progress == 100) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the complete msg object including payload and additional properties\n    return {\n        payload: {\n            job_id : Number(msg.payload.job_id),\n            job_name: String(msg.payload.file_name),\n            job_energy: Number(calculatedEnergy),\n            job_time : Number(msg.payload.time_printing)\n        }\n    };\n}\n*/\n\n// Update the context with the new values\ncontext.set('startenergy', startenergy);\ncontext.set('stopenergy', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "95265fbfb5cc4039",
        "type": "function",
        "z": "15c02bcbea060190",
        "name": "parse MINI data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "18b86d7a0a7b8f9b",
        "type": "function",
        "z": "26dc589d0b7e3f06",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "2c49483376d9bcf8",
        "type": "function",
        "z": "b56f3ebbdd287ae6",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8b5faa98556cb813",
        "type": "function",
        "z": "4eb801c5feee1f98",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\nvar output = {\n    payload: {\n        //type: \"PRUSA-MINI\",\n        printertype: String(msg.printertype),\n        measurement: String(msg.measurement),\n        state: String(msg.payload.printer.state),\n        //filename_name: String(msg.payload.project_name),\n        temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n        temp_bed: Number(msg.payload.printer.temp_bed),\n        flow: Number(msg.payload.printer.flow),\n        speed: Number(msg.payload.printer.speed),\n        //filament_status: String(msg.payload.filament_status)\n    },\n};\n\nif (output.payload.state == \"PRINTING\") {\n    msg.payload = {\n        //type: \"PRUSA-MINI\",\n        printertype: String(msg.printertype),\n        measurement: String(msg.measurement),\n        state: String(msg.payload.printer.state),\n        //filename_name: String(msg.payload.project_name),\n        temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n        temp_bed: Number(msg.payload.printer.temp_bed),\n        flow: Number(msg.payload.printer.flow),\n        speed: Number(msg.payload.printer.speed),\n        progress: Number(msg.payload.job.progress),\n        time_remaining: String(msg.payload.job.time_remaining),\n        time_printing: String(msg.payload.job.time_printing),\n        file_name: String(filename),\n        job_id: Number(job_id)\n        //filament_status: String(msg.payload.filament_status)\n    };\n}\n\n// Include msg.measurement outside of payload\nmsg.measurement = String(msg.measurement);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "7d081b124596da9b",
        "type": "switch",
        "z": "d5c353d21ed681c9",
        "name": "",
        "property": "payload.printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSA-MK3S-1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "b44c76fe6363ef54"
            ],
            [
                "5d15566c6f08d2f2"
            ]
        ]
    },
    {
        "id": "b44c76fe6363ef54",
        "type": "change",
        "z": "d5c353d21ed681c9",
        "name": "mini energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mini-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "10653d742cbba641"
            ]
        ]
    },
    {
        "id": "5d15566c6f08d2f2",
        "type": "change",
        "z": "d5c353d21ed681c9",
        "name": "mk3s1 energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mk3s1-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "10653d742cbba641"
            ]
        ]
    },
    {
        "id": "10653d742cbba641",
        "type": "function",
        "z": "d5c353d21ed681c9",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy') == undefined) {\n    context.set('startenergy', 0);\n}\n\nif (context.get('stopenergy') == undefined) {\n    context.set('stopenergy', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy');\nlet stopenergy = context.get('stopenergy');\n\n// Check if energy calculation has already occurred\nlet energyCalculated = context.get('energyCalculated');\n//node.warn(startenergy);\n//node.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 0 && startenergy == 0) {\n    startenergy = global.get(msg.payload.energytype); // Update only if startenergy is 0\n   // var job_name = msg.payload.file_name;\n   // var job_id = msg.payload.job_id;\n} else if (msg.payload.progress == 100 && stopenergy == 0 && !energyCalculated) {\n    stopenergy = global.get(msg.payload.energytype); // Update only if stopenergy is 0\n    var print_time = msg.payload.time_printing;\n    var filename = global.get('filename');\n    var job_id = global.get('job-id');\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy', 0);\n    context.set('stopenergy', 0);\n\n    // Set a flag to mark that energy calculation has occurred\n    context.set('energyCalculated', true);\n\n    // Output the calculated energy\n    if (stopenergy != 0 && startenergy !=0) {\n        return {\n            payload: {\n                job_id : Number(job_id),\n                job_name: String(filename),\n                job_energy: Number(calculatedEnergy),\n                job_time : Number(msg.payload.time_printing)\n            }\n        }       \n    };   \n}\n\n/*/ Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0 && msg.payload.progress == 100) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            job_id : Number(msg.payload.job_id),\n            job_name: String(msg.payload.file_name),\n            job_energy: Number(calculatedEnergy),\n            job_time : Number(msg.payload.time_printing)\n        }   \n    };\n}\n*/\n\n// Update the context with the new values\ncontext.set('startenergy', startenergy);\ncontext.set('stopenergy', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8cabd656481a12ce",
        "type": "function",
        "z": "f36865a9b0367ee5",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9089812951b8c914",
        "type": "switch",
        "z": "271e8c6d30455066",
        "name": "",
        "property": "payload.printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSA-MK3S-1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "f922894874b9f4fc"
            ],
            [
                "722902e43c83e7f5"
            ]
        ]
    },
    {
        "id": "f922894874b9f4fc",
        "type": "change",
        "z": "271e8c6d30455066",
        "name": "mini energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mini-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "2f62398aad3a4a1d"
            ]
        ]
    },
    {
        "id": "722902e43c83e7f5",
        "type": "change",
        "z": "271e8c6d30455066",
        "name": "mk3s1 energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mk3s1-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "2f62398aad3a4a1d"
            ]
        ]
    },
    {
        "id": "2f62398aad3a4a1d",
        "type": "function",
        "z": "271e8c6d30455066",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy') == undefined) {\n    context.set('startenergy', 0);\n}\n\nif (context.get('stopenergy') == undefined) {\n    context.set('stopenergy', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy');\nlet stopenergy = context.get('stopenergy');\n\n// Check if energy calculation has already occurred\nlet energyCalculated = context.get('energyCalculated');\n//node.warn(startenergy);\n//node.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 0 && startenergy == 0) {\n    startenergy = global.get(msg.payload.energytype); // Update only if startenergy is 0\n   // var job_name = msg.payload.file_name;\n   // var job_id = msg.payload.job_id;\n} else if (msg.payload.progress == 100 && stopenergy == 0 && !energyCalculated) {\n    stopenergy = global.get(msg.payload.energytype); // Update only if stopenergy is 0\n    var print_time = msg.payload.time_printing;\n    var filename = global.get('filename');\n    var job_id = global.get('job-id');\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy', 0);\n    context.set('stopenergy', 0);\n\n    // Set a flag to mark that energy calculation has occurred\n    context.set('energyCalculated', true);\n\n    // Output the calculated energy\n    if (stopenergy != 0 && startenergy !=0) {\n        return {\n            payload: {\n                job_id : Number(job_id),\n                job_name: String(filename),\n                job_energy: Number(calculatedEnergy),\n                job_time : Number(msg.payload.time_printing)\n            }\n        }       \n    };   \n}\n\n/*/ Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0 && msg.payload.progress == 100) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            job_id : Number(msg.payload.job_id),\n            job_name: String(msg.payload.file_name),\n            job_energy: Number(calculatedEnergy),\n            job_time : Number(msg.payload.time_printing)\n        }   \n    };\n}\n*/\n\n// Update the context with the new values\ncontext.set('startenergy', startenergy);\ncontext.set('stopenergy', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "d7e347fd1dbf912a",
        "type": "function",
        "z": "f0d623925ac07e2d",
        "name": "parse printer data",
        "func": "var filename = global.get('filename');\nvar job_id = global.get('job-id');\n\n// Create the payload object\nmsg.payload = {\n    //type: \"PRUSA-MINI\",\n    printertype: String(msg.printertype),\n    state: String(msg.payload.printer.state),\n    //filename_name: String(msg.payload.project_name),\n    temp_nozzle: Number(msg.payload.printer.temp_nozzle),\n    temp_bed: Number(msg.payload.printer.temp_bed),\n    flow: Number(msg.payload.printer.flow),\n    speed: Number(msg.payload.printer.speed),\n    //filament_status: String(msg.payload.filament_status)\n};\n\n// Add bucket property directly to msg\nmsg.bucket = String(msg.bucket);\n\n// Add measurement property directly to msg\nmsg.measurement = String(msg.measurement);\n\nif (msg.payload.state == \"PRINTING\") {\n    // Add properties to payload if printing\n    msg.payload.progress = Number(msg.payload.job.progress);\n    msg.payload.time_remaining = String(msg.payload.job.time_remaining);\n    msg.payload.time_printing = String(msg.payload.job.time_printing);\n    //msg.payload.file_name = String(filename);\n    //msg.payload.job_id = Number(job_id);\n}\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "32fe707fbf8dad54",
        "type": "switch",
        "z": "192b2bd79f1cc9d1",
        "name": "",
        "property": "payload.printertype",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRUSAMINI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PRUSA-MK3S-1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "b8257e8f61c962b8"
            ],
            [
                "0c9ae76d517c8403"
            ]
        ]
    },
    {
        "id": "b8257e8f61c962b8",
        "type": "change",
        "z": "192b2bd79f1cc9d1",
        "name": "mini energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mini-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 40,
        "wires": [
            [
                "dcd322b39e0146a9"
            ]
        ]
    },
    {
        "id": "0c9ae76d517c8403",
        "type": "change",
        "z": "192b2bd79f1cc9d1",
        "name": "mk3s1 energy",
        "rules": [
            {
                "t": "set",
                "p": "payload.energytype",
                "pt": "msg",
                "to": "'mk3s1-energy'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "dcd322b39e0146a9"
            ]
        ]
    },
    {
        "id": "dcd322b39e0146a9",
        "type": "function",
        "z": "192b2bd79f1cc9d1",
        "name": "energy-prusamini",
        "func": "// Ensure startenergy and stopenergy for prusamini are initialized in the context\nif (context.get('startenergy') == undefined) {\n    context.set('startenergy', 0);\n}\n\nif (context.get('stopenergy') == undefined) {\n    context.set('stopenergy', 0);\n}\n\n// Get the current values from context\nlet startenergy = context.get('startenergy');\nlet stopenergy = context.get('stopenergy');\n\n// Check if energy calculation has already occurred\nlet energyCalculated = context.get('energyCalculated');\n//node.warn(startenergy);\n//node.warn(stopenergy);\n// Check payload.progress and update energy based on the value\nif (msg.payload.progress >= 0 && startenergy == 0) {\n    startenergy = global.get(msg.payload.energytype); // Update only if startenergy is 0\n   // var job_name = msg.payload.file_name;\n   // var job_id = msg.payload.job_id;\n} else if (msg.payload.progress == 100 && stopenergy == 0 && !energyCalculated) {\n    stopenergy = global.get(msg.payload.energytype); // Update only if stopenergy is 0\n    var print_time = msg.payload.time_printing;\n    var filename = global.get('filename');\n    var job_id = global.get('job-id');\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy', 0);\n    context.set('stopenergy', 0);\n\n    // Set a flag to mark that energy calculation has occurred\n    context.set('energyCalculated', true);\n\n    // Output the calculated energy\n    if (stopenergy != 0 && startenergy !=0) {\n        return {\n            payload: {\n                job_id : Number(job_id),\n                job_name: String(filename),\n                job_energy: Number(calculatedEnergy),\n                job_time : Number(msg.payload.time_printing)\n            }\n        }       \n    };   \n}\n\n/*/ Calculate energy when both startenergy and stopenergy are set\nif (startenergy != 0 && stopenergy != 0 && msg.payload.progress == 100) {\n    var calculatedEnergy = stopenergy - startenergy;\n    node.warn(calculatedEnergy);\n    // Reset the context values for next cycle\n    context.set('startenergy_prusamini', 0);\n    context.set('stopenergy_prusamini', 0);\n\n    // Output the calculated energy\n    return {\n        payload: {\n            job_id : Number(msg.payload.job_id),\n            job_name: String(msg.payload.file_name),\n            job_energy: Number(calculatedEnergy),\n            job_time : Number(msg.payload.time_printing)\n        }   \n    };\n}\n*/\n\n// Update the context with the new values\ncontext.set('startenergy', startenergy);\ncontext.set('stopenergy', stopenergy);\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cab08d2c11a686e3",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "79b9a1f35b796f7d",
        "name": "set device config",
        "func": "let config_data = {\n    deviceId: \"prusa-mk4-1\",            // Device name or ID\n    ipAddress: \"192.168.188.61\",        // Device IP address\n    devicetype: \"3dp\",                  // Type (e.g., 3dp, cnc, laser)\n    devicebrand: \"prusa\",               // Brand (e.g., prusa, creality)\n    energysensordeviceid: \"SPPS-04\",      // Linked electrical device ID \n    energysensordevicetype: \"electrical-energy\", // Electrical device type\n    energysensordevicebrand: \"shelly\",    // Electrical device brand (e.g., shelly)\n    }\n\nflow.set('machine_config_data', config_data);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2fa165c7f25a1678",
        "type": "inject",
        "z": "ec5af00ecd098976",
        "g": "79b9a1f35b796f7d",
        "name": "Set machine config once",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 180,
        "wires": [
            [
                "cab08d2c11a686e3"
            ]
        ]
    },
    {
        "id": "b052a32c02e9a8fb",
        "type": "http request",
        "z": "ec5af00ecd098976",
        "g": "051820b4a1362d38",
        "name": "request Gcode file",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "digest",
        "senderr": false,
        "headers": [],
        "x": 1840,
        "y": 300,
        "wires": [
            [
                "441841bf3cdd26dc"
            ]
        ]
    },
    {
        "id": "59f62f883b59548d",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "051820b4a1362d38",
        "name": "gcode download url",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\nlet file_path = flow.get('job_file_path')\n\n// Build the full URL\nmsg.url = `http://${config.ipAddress}${file_path}`;\n// Pass the message along\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 260,
        "wires": [
            [
                "b052a32c02e9a8fb"
            ]
        ]
    },
    {
        "id": "441841bf3cdd26dc",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "051820b4a1362d38",
        "name": "Extract the gcode information",
        "func": "let text = msg.payload;\n\n// Fields to extract\nlet fields = [\n  \"filament_type\",\n  \"nozzle_diameter\",\n  \"layer_height\",\n  \"filament used [mm]\",\n  \"filament used [g]\"\n];\n\nlet result = {};\n\nfields.forEach(field => {\n  // Escape special regex characters in field name\n  let escapedField = field.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  let regex = new RegExp(escapedField + \"\\\\s*=\\\\s*(.*)\");\n  let match = text.match(regex);\n  if (match) {\n    result[field] = match[1].trim();\n  } else {\n    result[field] = null;\n  }\n});\n\nmsg.payload = result;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 340,
        "wires": [
            [
                "05422c266324773e",
                "aa0ae0bf318b0c1a"
            ]
        ]
    },
    {
        "id": "05422c266324773e",
        "type": "debug",
        "z": "ec5af00ecd098976",
        "g": "051820b4a1362d38",
        "name": "Extrated Gcode ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2190,
        "y": 340,
        "wires": []
    },
    {
        "id": "4eb05edd0fdb960c",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "051820b4a1362d38",
        "name": "URL for Job ",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\nnode.warn(\"setting job trigered\");\n// Build the full URL\nmsg.url = `http://${config.ipAddress}/api/job`;\n// Pass the message along\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 200,
        "wires": [
            [
                "9965c29b0372fc31"
            ]
        ]
    },
    {
        "id": "9965c29b0372fc31",
        "type": "http request",
        "z": "ec5af00ecd098976",
        "g": "051820b4a1362d38",
        "name": "get the job file path",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "digest",
        "senderr": false,
        "headers": [],
        "x": 1930,
        "y": 200,
        "wires": [
            [
                "7b79a6122bd2dc63"
            ]
        ]
    },
    {
        "id": "7b79a6122bd2dc63",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "051820b4a1362d38",
        "name": "store job file path",
        "func": "// Set the file path in flow context\nlet filePath = msg.payload?.job?.file?.path;\nnode.warn(filePath);\nflow.set(\"job_file_path\", filePath);\n\n// Nothing to send forward\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "feba35c4968704db",
        "type": "http request",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "prusa printer status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "digest",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 480,
        "wires": [
            [
                "abe3e01577d75251",
                "d0d7f9e23af26e35"
            ]
        ]
    },
    {
        "id": "04145d02f0b5ac4e",
        "type": "trigger",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "IDLE",
        "bytopic": "all",
        "topic": "payload.printerstate",
        "outputs": 1,
        "x": 320,
        "y": 480,
        "wires": [
            [
                "93a11acebfb74e36"
            ]
        ]
    },
    {
        "id": "50ba87844ed3828c",
        "type": "inject",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "printertype",
                "v": "PRUSAMINI",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "RUN",
        "payloadType": "str",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "04145d02f0b5ac4e"
            ]
        ]
    },
    {
        "id": "d0d7f9e23af26e35",
        "type": "debug",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "Prusa printer telemetry",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 540,
        "wires": []
    },
    {
        "id": "abe3e01577d75251",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "Store Machine Data",
        "func": "flow.set('machine-data', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 480,
        "wires": [
            [
                "54e56ec6455c354d",
                "fdeee465b8a00662",
                "6bc64a96b5d40bd4"
            ]
        ]
    },
    {
        "id": "a9e6755f781a7afd",
        "type": "debug",
        "z": "ec5af00ecd098976",
        "g": "b9934f41d1ee4cd1",
        "name": "Energy Per Print",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 360,
        "wires": []
    },
    {
        "id": "fdeee465b8a00662",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "structure machine process for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\n\nmsg.payload.printer.electricaldeviceid = config.energysensordeviceid\nmsg.payload = [\n    {\n        measurement: \"machine\",\n        fields: msg.payload.printer,\n        tags: {\n            process:\"machineprocess\",\n            device: config.deviceId, \n            brand: config.devicebrand,  \n            type: config.devicetype \n        },\n    }\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 520,
        "wires": [
            [
                "023f4a354bcdf8a4"
            ]
        ]
    },
    {
        "id": "aa0ae0bf318b0c1a",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "051820b4a1362d38",
        "name": "structure job for influx",
        "func": "// Get the config object and energy data from flow\nlet config = flow.get('machine_config_data');\nlet energy_per_print = flow.get('energy_per_print');\n\n// Safely ensure both are objects\nlet jobData = (typeof msg.payload === 'object' && msg.payload !== null) ? msg.payload : {};\nlet energyData = (typeof energy_per_print === 'object' && energy_per_print !== null) ? energy_per_print : {};\n\n// Merge both objects into one combined object\nlet combinedFields = { ...jobData, ...energyData };\n\n// Build the final payload\nmsg.payload = [\n    {\n        measurement: \"jobs\",\n        fields: combinedFields,\n        tags: {\n            device: config.deviceId, \n            brand: config.devicebrand,  \n            type: config.devicetype \n        },\n    }\n];\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 400,
        "wires": [
            [
                "023f4a354bcdf8a4"
            ]
        ]
    },
    {
        "id": "1fdb1deeea8b608b",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "b9934f41d1ee4cd1",
        "name": "Calculate Energy Per Print",
        "func": "let currentEnergy = msg.energyCounter;\nlet machineState = msg.machineState;\nlet jobId = msg.jobId;\n\n// Define machine states\nlet activeState = ['WORKING','PRINTING','CUTTING'];\nlet idleStates = ['IDLE', 'FINISHED'];\n\n// Initialize jobStarted\nif (!flow.get('jobStarted')) flow.set('jobStarted', false);\n\nfunction generateRandomId(length) {\n    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\n\n// Prepare outputs: [triggerHttpNode, jobResult]\nlet outputs = [null, null];\n\nif (activeState.includes(machineState)) {\n    if (!flow.get('jobStarted')) {\n        // Safely convert jobId to string to avoid trim errors\n        jobId = jobId != null ? String(jobId) : '';\n        if (jobId === '') {\n            jobId = generateRandomId(5); // Assign random ID if missing/empty\n        }\n\n        // Start job\n        flow.set('jobStarted', true);\n        flow.set('initialEnergy', currentEnergy);\n        flow.set('currentJobId', jobId);\n        flow.set('jobStartTime', Date.now());\n        outputs[0] = { payload: {} }; // first output triggers HTTP node\n        return outputs;\n        //node.warn(`Job started. JobId: ${jobId}, Initial energy: ${currentEnergy}`);\n    } else {\n        //node.warn(`Job is running. Current energy: ${currentEnergy}`);\n    }\n} \nelse if (flow.get('jobStarted') && idleStates.includes(machineState)) {\n    // Job finished\n    let initialEnergy = flow.get('initialEnergy');\n    let currentJobId = flow.get('currentJobId');\n    let energyConsumed = currentEnergy - initialEnergy;\n    let jobStartTime = flow.get('jobStartTime');\n    let jobEndTime = Date.now();\n\n    let jobResult = {\n        jobId: currentJobId,\n        energyConsumed: energyConsumed,\n        jobDuration: (jobEndTime - jobStartTime) / 1000,\n        gcodeFilePath: flow.get('gcodeFilePath') // Include G-code path\n    };\n\n    // Reset flow variables\n    flow.set('jobStarted', false);\n    flow.set('initialEnergy', null);\n    flow.set('currentJobId', null);\n    flow.set('jobStartTime', null);\n    flow.set('gcodeFilePath', null);\n\n    node.warn(`Job completed. JobId: ${currentJobId}, Energy consumed: ${energyConsumed}, Duration: ${jobResult.jobDuration}s, G-code Path: ${jobResult.gcodeFilePath}`);\n\n    outputs[1] = { payload: jobResult }; // second output sends job result\n}\n\n// Return both outputs\nreturn outputs;\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 360,
        "wires": [
            [
                "4eb05edd0fdb960c"
            ],
            [
                "a9e6755f781a7afd",
                "59f62f883b59548d",
                "48546b77fb61a41a"
            ]
        ]
    },
    {
        "id": "54e56ec6455c354d",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "b9934f41d1ee4cd1",
        "name": "Inpu require variables",
        "func": "let required_data = {\n    energyCounter: flow.get('currentEnergy'),\n\n    // optional chaining prevents errors if intermediate objects are undefined\n    machineState: flow.get('machine-data')?.printer?.state || null,\n    jobId: flow.get('machine-data')?.job?.id || null,\n};\n\n// Send collected data\nmsg = required_data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 360,
        "wires": [
            [
                "1fdb1deeea8b608b"
            ]
        ]
    },
    {
        "id": "92f4e84bb2feef06",
        "type": "mqtt in",
        "z": "ec5af00ecd098976",
        "g": "77fecb5b6322ef90",
        "name": "Shelly Data",
        "topic": "",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 760,
        "wires": [
            [
                "453cf66caa46d7c6",
                "ecf7e956b13dfa94"
            ]
        ]
    },
    {
        "id": "453cf66caa46d7c6",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "77fecb5b6322ef90",
        "name": "structure for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\nmsg.payload.aenergy = msg.payload.aenergy.total\nmsg.payload = [\n    {\n        measurement: \"sensor\",\n        fields: msg.payload,\n        tags: {\n            brand: config.energysensordevicebrand,\n            device: config.energysensordeviceid,\n            type: config.energysensordevicebrand\n        },\n    }\n];\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 760,
        "wires": [
            [
                "7c0854b287c9cb3e",
                "8eedbff3177a562b"
            ]
        ]
    },
    {
        "id": "7c0854b287c9cb3e",
        "type": "influxdb batch",
        "z": "ec5af00ecd098976",
        "g": "77fecb5b6322ef90",
        "influxdb": "",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory",
        "x": 890,
        "y": 760,
        "wires": []
    },
    {
        "id": "8eedbff3177a562b",
        "type": "debug",
        "z": "ec5af00ecd098976",
        "g": "77fecb5b6322ef90",
        "name": "shelly telemetry",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 700,
        "wires": []
    },
    {
        "id": "ecf7e956b13dfa94",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "77fecb5b6322ef90",
        "name": "store current energy",
        "func": "flow.set('currentEnergy', msg.payload.aenergy.total);\nflow.set('shellydata', msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "99d3806b868850d7",
        "type": "comment",
        "z": "ec5af00ecd098976",
        "g": "b9934f41d1ee4cd1",
        "name": "adapt to machine API",
        "info": "",
        "x": 950,
        "y": 320,
        "wires": []
    },
    {
        "id": "93a11acebfb74e36",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "url for printer status",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\n\n// Build the full URL\nmsg.url = `http://${config.ipAddress}/api/v1/status`;\n\n// Pass the message along\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 480,
        "wires": [
            [
                "feba35c4968704db"
            ]
        ]
    },
    {
        "id": "023f4a354bcdf8a4",
        "type": "influxdb batch",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "influxdb": "",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory",
        "x": 1560,
        "y": 500,
        "wires": []
    },
    {
        "id": "6bc64a96b5d40bd4",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "762130b55ea7bbd0",
        "name": "structure job process for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\n\n\nif (msg.payload && msg.payload.job) {\n    msg.payload = [\n        {\n            measurement: \"machine\",\n            fields: msg.payload.job,\n            tags: {\n                process:\"job\",\n                device: config.deviceId, \n                brand: config.devicebrand,  \n                type: config.devicetype \n            },\n        }\n    ];\n    return msg;\n}\n\n// if job does not exist, stop flow\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 480,
        "wires": [
            [
                "023f4a354bcdf8a4"
            ]
        ]
    },
    {
        "id": "48546b77fb61a41a",
        "type": "function",
        "z": "ec5af00ecd098976",
        "g": "b9934f41d1ee4cd1",
        "name": "store energy",
        "func": "// Set the file path in flow context\nlet energy_per_print = msg.payload;\nflow.set(\"energy_per_print\", energy_per_print);\n\n// Nothing to send forward\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "cd929542f7fa8a3b",
        "type": "http request",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "prusa printer status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "digest",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 360,
        "wires": [
            [
                "10a27260fe52c4d9",
                "f0375236fa9ee83f"
            ]
        ]
    },
    {
        "id": "4128cd9f9bf4f993",
        "type": "trigger",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": true,
        "overrideDelay": true,
        "units": "s",
        "reset": "IDLE",
        "bytopic": "all",
        "topic": "payload.printerstate",
        "outputs": 1,
        "x": 360,
        "y": 360,
        "wires": [
            [
                "94d2851a44cfdf95"
            ]
        ]
    },
    {
        "id": "56175a0e7bbaa8a2",
        "type": "inject",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "printertype",
                "v": "PRUSAMINI",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "RUN",
        "payloadType": "str",
        "x": 210,
        "y": 360,
        "wires": [
            [
                "4128cd9f9bf4f993"
            ]
        ]
    },
    {
        "id": "f0375236fa9ee83f",
        "type": "debug",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "Prusa printer telemetry",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 420,
        "wires": []
    },
    {
        "id": "10a27260fe52c4d9",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "Store Machine Data",
        "func": "flow.set('machine-data', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 360,
        "wires": [
            [
                "3f42bb761c80a0bf",
                "6aca11aeeddc9452",
                "5f6f617de8db8f9e"
            ]
        ]
    },
    {
        "id": "c740a5c2bc039326",
        "type": "debug",
        "z": "57baeac36603a20d",
        "g": "fe0a04a6cf21a576",
        "name": "Energy Per Print",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 240,
        "wires": []
    },
    {
        "id": "6aca11aeeddc9452",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "structure machine process for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\n\nmsg.payload.printer.electricaldeviceid = config.energysensordeviceid\nmsg.payload = [\n    {\n        measurement: \"machine\",\n        fields: msg.payload.printer,\n        tags: {\n            process:\"machineprocess\",\n            device: config.deviceId, \n            brand: config.devicebrand,  \n            type: config.devicetype \n        },\n    }\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 400,
        "wires": [
            [
                "c59de4ed040fd1e9"
            ]
        ]
    },
    {
        "id": "1b0be97060b6fb1e",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "fe0a04a6cf21a576",
        "name": "structure job for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\nmsg.payload = [\n    {\n        measurement: \"jobs\",\n        fields: msg.payload,\n        tags: {\n            device: config.deviceId, \n            brand: config.devicebrand,  \n            type: config.devicetype \n        },\n    }\n];\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 280,
        "wires": [
            [
                "c59de4ed040fd1e9"
            ]
        ]
    },
    {
        "id": "22146774fc315105",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "fe0a04a6cf21a576",
        "name": "Calculate Energy Per Print",
        "func": "let currentEnergy = msg.energyCounter;\nlet machineState = msg.machineState;\nlet jobId = msg.jobId;\n\n// Define machine states\nlet activeState = ['WORKING','PRINTING','CUTTING'];\nlet idleStates = ['IDLE', 'FINISHED'];\n\n// Initialize jobStarted\nif (!flow.get('jobStarted')) flow.set('jobStarted', false);\n\nfunction generateRandomId(length) {\n    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\n\n// Prepare outputs: [triggerHttpNode, jobResult]\nlet outputs = [null, null];\n\nif (activeState.includes(machineState)) {\n    if (!flow.get('jobStarted')) {\n        // Safely convert jobId to string to avoid trim errors\n        jobId = jobId != null ? String(jobId) : '';\n        if (jobId === '') {\n            jobId = generateRandomId(5); // Assign random ID if missing/empty\n        }\n\n        // Start job\n        flow.set('jobStarted', true);\n        flow.set('initialEnergy', currentEnergy);\n        flow.set('currentJobId', jobId);\n        flow.set('jobStartTime', Date.now());\n        outputs[0] = { payload: {} }; // first output triggers HTTP node\n        return outputs;\n        //node.warn(`Job started. JobId: ${jobId}, Initial energy: ${currentEnergy}`);\n    } else {\n        //node.warn(`Job is running. Current energy: ${currentEnergy}`);\n    }\n} \nelse if (flow.get('jobStarted') && idleStates.includes(machineState)) {\n    // Job finished\n    let initialEnergy = flow.get('initialEnergy');\n    let currentJobId = flow.get('currentJobId');\n    let energyConsumed = currentEnergy - initialEnergy;\n    let jobStartTime = flow.get('jobStartTime');\n    let jobEndTime = Date.now();\n\n    let jobResult = {\n        jobId: currentJobId,\n        energyConsumed: energyConsumed,\n        jobDuration: (jobEndTime - jobStartTime) / 1000,\n        gcodeFilePath: flow.get('gcodeFilePath') // Include G-code path\n    };\n\n    // Reset flow variables\n    flow.set('jobStarted', false);\n    flow.set('initialEnergy', null);\n    flow.set('currentJobId', null);\n    flow.set('jobStartTime', null);\n    flow.set('gcodeFilePath', null);\n\n    node.warn(`Job completed. JobId: ${currentJobId}, Energy consumed: ${energyConsumed}, Duration: ${jobResult.jobDuration}s, G-code Path: ${jobResult.gcodeFilePath}`);\n\n    outputs[1] = { payload: jobResult }; // second output sends job result\n}\n\n// Return both outputs\nreturn outputs;\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 240,
        "wires": [
            [],
            [
                "c740a5c2bc039326",
                "1b0be97060b6fb1e"
            ]
        ]
    },
    {
        "id": "3f42bb761c80a0bf",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "fe0a04a6cf21a576",
        "name": "Inpu require variables",
        "func": "let required_data = {\n    energyCounter: flow.get('currentEnergy'),\n\n    // optional chaining prevents errors if intermediate objects are undefined\n    machineState: flow.get('machine-data')?.printer?.state || null,\n    jobId: flow.get('machine-data')?.job?.id || null,\n};\n\n// Send collected data\nmsg = required_data;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 240,
        "wires": [
            [
                "22146774fc315105"
            ]
        ]
    },
    {
        "id": "c65b1b38fb15c364",
        "type": "mqtt in",
        "z": "57baeac36603a20d",
        "g": "72d96e169767b10e",
        "name": "Shelly Data",
        "topic": "SPPS-05/status/switch:0",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 600,
        "wires": [
            [
                "f7b1e4e0eb5675fc",
                "3ba05b737ca84ab8"
            ]
        ]
    },
    {
        "id": "f7b1e4e0eb5675fc",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "72d96e169767b10e",
        "name": "structure for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\nmsg.payload.aenergy = msg.payload.aenergy.total\nmsg.payload = [\n    {\n        measurement: \"sensor\",\n        fields: msg.payload,\n        tags: {\n            brand: config.energysensordevicebrand,\n            device: config.energysensordeviceid,\n            type: config.energysensordevicebrand\n        },\n    }\n];\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            [
                "713f1b254f9114c6",
                "96b7144416781ced"
            ]
        ]
    },
    {
        "id": "713f1b254f9114c6",
        "type": "influxdb batch",
        "z": "57baeac36603a20d",
        "g": "72d96e169767b10e",
        "influxdb": "",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory",
        "x": 830,
        "y": 600,
        "wires": []
    },
    {
        "id": "96b7144416781ced",
        "type": "debug",
        "z": "57baeac36603a20d",
        "g": "72d96e169767b10e",
        "name": "Shelly telemetry",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 540,
        "wires": []
    },
    {
        "id": "3ba05b737ca84ab8",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "72d96e169767b10e",
        "name": "store current energy",
        "func": "flow.set('currentEnergy', msg.payload.aenergy.total);\nflow.set('shellydata', msg.payload)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "47d0f4f679d1cc04",
        "type": "comment",
        "z": "57baeac36603a20d",
        "g": "fe0a04a6cf21a576",
        "name": "adapt to machine API",
        "info": "",
        "x": 990,
        "y": 200,
        "wires": []
    },
    {
        "id": "7ea7eb783a22aa55",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "8c9692d8f706424d",
        "name": "set device config",
        "func": "let config_data = {\n    deviceId: \"prusa-mk4-1\",            // Device name or ID\n    ipAddress: \"192.168.188.61\",        // Device IP address\n    devicetype: \"3dp\",                  // Type (e.g., 3dp, cnc, laser)\n    devicebrand: \"prusa\",               // Brand (e.g., prusa, creality)\n    energysensordeviceid: \"SPPS-04\",      // Linked electrical device ID \n    energysensordevicetype: \"electrical-energy\", // Electrical device type\n    energysensordevicebrand: \"shelly\",    // Electrical device brand (e.g., shelly)\n    }\n\nflow.set('machine_config_data', config_data);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "f24bbfc5da90ada7",
        "type": "inject",
        "z": "57baeac36603a20d",
        "g": "8c9692d8f706424d",
        "name": "Set machine config once",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 80,
        "wires": [
            [
                "7ea7eb783a22aa55"
            ]
        ]
    },
    {
        "id": "94d2851a44cfdf95",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "url for printer status",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\n\n// Build the full URL\nmsg.url = `http://${config.ipAddress}/api/v1/status`;\n\n// Pass the message along\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 360,
        "wires": [
            [
                "cd929542f7fa8a3b"
            ]
        ]
    },
    {
        "id": "c59de4ed040fd1e9",
        "type": "influxdb batch",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "influxdb": "",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory",
        "x": 1660,
        "y": 380,
        "wires": []
    },
    {
        "id": "5f6f617de8db8f9e",
        "type": "function",
        "z": "57baeac36603a20d",
        "g": "abbf381a615d5555",
        "name": "structure job process for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\n\n\nif (msg.payload && msg.payload.job) {\n    msg.payload = [\n        {\n            measurement: \"machine\",\n            fields: msg.payload.job,\n            tags: {\n                process:\"job\",\n                device: config.deviceId, \n                brand: config.devicebrand,  \n                type: config.devicetype \n            },\n        }\n    ];\n    return msg;\n}\n\n// if job does not exist, stop flow\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 360,
        "wires": [
            [
                "c59de4ed040fd1e9"
            ]
        ]
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 380,
        "y": 100,
        "wires": []
    },
    {
        "id": "c4bc2b8ca0c16330",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Structure for Influx",
        "func": "msg.payload = [\n    {\n        measurement: \"energy_sensor\",\n        fields: msg.payload,\n        tags: {\n            brand: \"Emon\",\n            device: \"EmonPi2\"\n        },\n    }\n];\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 280,
        "wires": [
            [
                "3dc660fd23e20ed6",
                "202a227ae917f3bc"
            ]
        ]
    },
    {
        "id": "3dc660fd23e20ed6",
        "type": "influxdb batch",
        "z": "f6f2187d.f17ca8",
        "influxdb": "",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 1090,
        "y": 300,
        "wires": []
    },
    {
        "id": "202a227ae917f3bc",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 180,
        "wires": []
    },
    {
        "id": "6e5a22fc3c37a5b8",
        "type": "join",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "17",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 330,
        "y": 280,
        "wires": [
            [
                "ad3eadb35bbdb6f0"
            ]
        ]
    },
    {
        "id": "b31cd1d5bbe94338",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "emon/EmonPi2/#",
        "qos": "2",
        "datatype": "json",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "6e5a22fc3c37a5b8"
            ]
        ]
    },
    {
        "id": "ad3eadb35bbdb6f0",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Extract the required parameters",
        "func": "let input = msg.payload;\n\nmsg.payload = {\n    V1 : input[\"emon/EmonPi2/V1\"],\n    P1 : input[\"emon/EmonPi2/P1\"]\n\n}\nreturn msg\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 280,
        "wires": [
            [
                "c4bc2b8ca0c16330"
            ]
        ]
    },
    {
        "id": "9b453aa2a66f16b1",
        "type": "mqtt in",
        "z": "e83f6f0b92151d65",
        "name": "SPPS-04 Shelly Data",
        "topic": "SPPS-04/status/switch:0",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 480,
        "y": 320,
        "wires": [
            [
                "323eb93fa2d15476",
                "ccc519922e1fc56a",
                "6237addb7fa68f99"
            ]
        ]
    },
    {
        "id": "323eb93fa2d15476",
        "type": "function",
        "z": "e83f6f0b92151d65",
        "name": "structure for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\nmsg.payload = [\n    {\n        measurement: \"sensor\",\n        fields: msg.payload,\n        tags: {\n            brand: config.electricaldevicebrand,\n            device: config.electricaldeviceid,\n            type: config.electricaldevicebrand\n        },\n    }\n];\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 320,
        "wires": [
            [
                "3c1d30c986317c96"
            ]
        ]
    },
    {
        "id": "3c1d30c986317c96",
        "type": "influxdb batch",
        "z": "e83f6f0b92151d65",
        "influxdb": "",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 1030,
        "y": 320,
        "wires": []
    },
    {
        "id": "6237addb7fa68f99",
        "type": "debug",
        "z": "e83f6f0b92151d65",
        "name": "shelly telemetry",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 420,
        "wires": []
    },
    {
        "id": "ccc519922e1fc56a",
        "type": "function",
        "z": "e83f6f0b92151d65",
        "name": "store current energy",
        "func": "global.set('currentEnergy', msg.payload.aenergy.total);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d47b1cf4eb672048",
        "type": "function",
        "z": "e83f6f0b92151d65",
        "name": "set device config",
        "func": "let config_data = {\n    electricaldeviceid: \"SPPS-04\",      // Electrical device ID\n    electricaldevicetype: \"electrical-energy\", // Electrical device type\n    electricaldevicebrand: \"shelly\",    // Electrical device brand (e.g., shelly)\n}\n\nflow.set('machine_config_data', config_data);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "94c771532486467e",
        "type": "inject",
        "z": "e83f6f0b92151d65",
        "name": "Set machine config once",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 510,
        "y": 100,
        "wires": [
            [
                "d47b1cf4eb672048"
            ]
        ]
    },
    {
        "id": "cc41e4392935e486",
        "type": "mqtt in",
        "z": "c970b824705576f5",
        "name": "",
        "topic": "airgradient/readings/d83bda1b0e5c",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 160,
        "wires": [
            [
                "99c31db3f1a93494",
                "77c9da1bb3a844e1"
            ]
        ]
    },
    {
        "id": "99c31db3f1a93494",
        "type": "debug",
        "z": "c970b824705576f5",
        "name": "Air gradient telemetry",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 220,
        "wires": []
    },
    {
        "id": "77c9da1bb3a844e1",
        "type": "function",
        "z": "c970b824705576f5",
        "name": "structure for influx",
        "func": "// Get the config object from flow\nlet config = flow.get('machine_config_data');\nmsg.payload = [\n    {\n        measurement: \"air-gradient\",   \n        fields: msg.payload,\n        tags: {\n            devicelocation: config.location \n        },\n    }\n];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 160,
        "wires": [
            [
                "a4e0282d94754852"
            ]
        ]
    },
    {
        "id": "a4e0282d94754852",
        "type": "influxdb batch",
        "z": "c970b824705576f5",
        "influxdb": "",
        "precision": "",
        "retentionPolicy": "",
        "name": "influxDB microfactory",
        "database": "database",
        "precisionV18FluxV20": "ms",
        "retentionPolicyV18Flux": "",
        "org": "microfactory",
        "bucket": "microfactory-jupiter-DS",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "c712efa39cde2d7f",
        "type": "function",
        "z": "c970b824705576f5",
        "name": "set device config",
        "func": "let config_data = {\n    devicelocation: \"\"   // location of the device\n}\n\nflow.set('machine_config_data', config_data);\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 464,
        "y": 87,
        "wires": [
            []
        ]
    },
    {
        "id": "b78daef99cb140dd",
        "type": "inject",
        "z": "c970b824705576f5",
        "name": "Set machine config once",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 204,
        "y": 87,
        "wires": [
            [
                "c712efa39cde2d7f"
            ]
        ]
    }
]